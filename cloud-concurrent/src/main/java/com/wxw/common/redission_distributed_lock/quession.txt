
Redission 文档：(https://github.com/redisson/redisson/wiki)

1. redis cluster，或者是redis master-slave架构的主从异步复制导致的redis分布式锁的最大缺陷：
  - 在redis master实例宕机的时候，可能导致多个客户端同时完成加锁
  redis锁可以比较完美地解决高并发的时候分布式系统的线程安全性的问题，但是这种锁机制也并不是完美的。在主备切换模式下，客户端对master节点加了锁，
  此时会异步复制给slave节点，此时如果master发生宕机，主备切换，其他salve 选举为主节点，因为之前是异步复制，所以此时正好又有个线程来尝试加锁的时候，
  就会导致多个客户端对同一个分布式锁完成了加锁操作，进而产生脏数据。（https://blog.csdn.net/belongtocode/article/details/102511520）
  - https://mp.weixin.qq.com/s/y_Uw3P2Ll7wvk_j5Fdlusw

2. 红锁
  解决的问题：主从节点下异步 （传送）同步数据导致锁丢失问题
  问题场景复现： 数据采用异步复制导致数据丢失 或者，网络故障产生脑裂的问题会丢失部分数据，也就是锁丢失，
  红锁算法解决方法：这个算法的精髓就是: 没有从节点, 如果部署多台 Redis, 各实例之间相互独立, 不存在主从复制或者其他集群协调机制
           其实你可以建造5个完全独立的redis计数器，然后分别创建5个redis连接到这5个redis计数器上，也就是建造5个Redisson实例。
           加锁的时候，用这5个Redisson实例创建5个RLock，然后基于这5个RLock再构造RedissonRedLock就好了。
           这样就不存在你描述一个主机中断停机带来的问题了。
  相关文章：
    1.https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html
    2.https://www.cnblogs.com/qg000/p/13403466.html  锁的自动续约

3. 数据丢失故障排查
 1、在redis主从复制架构下，数据采用异步复制导致数据丢失
     master在数据还没有被真正提交到slave节点的时候宕机会导致数据丢失
     主备节点需要同步数据
     数据在主节点缓冲区中准备同步
     master宕机
     sentinel提升slave为master
     当前的master没有缓冲区的内容

 2、网络故障造成短时不可用
在集群中如果master节点网络突然不可用，会导致sentinel提升一个slave为master
     master网络对sentinel集群不可用，对一些client可用
     sentinel提升一个slave为master
     client继续向老的master提交数据
     两个master同时存在集群中，数据也不同，称为脑裂问题
     sentinel会尝试恢复问题，把老的master降级为slave
     slave向新的master同步数据的时候导致数据丢失

解决办法：
# min-replicas-to-write 3
# min-replicas-max-lag 10
至少有min-replicas-to-write个slave 的网络延迟不超过min-replicas-max-lag才会提供服务，否则拒绝向客户端提供写请求服务。